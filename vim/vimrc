set encoding=utf-8
scriptencoding utf-8

" various plugins need this
set nocompatible

"""""""""""""""""""""""""""""

syntax enable

source $HOME/.vim/vundle.vim

set hidden
set autoindent
set smartindent
set cindent
set expandtab
set tabstop=4
set softtabstop=4


"""
" set filetype=on # turned on be next ones
filetype plugin on
filetype indent on


""" searching
set incsearch
set ignorecase
set smartcase
set hls
" turn highlight of search on/off
noremap <Space> :set hlsearch! hlsearch?<CR>

""" scrolling (while searching)

"set scrolloff=5 " keep n lines visible

" If cursor is in first or last line of window, scroll to middle line.
function s:MaybeMiddle()
  if winline() == 1 || winline() == winheight(0)
    normal! zz
  endif
endfunction

nnoremap <silent> n n:call <SID>MaybeMiddle()<CR>
nnoremap <silent> N N:call <SID>MaybeMiddle()<CR>

""" mouse
" set mouse=a


""" UI
set showcmd
set wildmenu
set wildmode=longest,list,full
set shiftwidth=4
set showmatch   " jump to previous { when inserting }
set ruler       " position in file
set number
set laststatus=2

" solarized colour schema
" colorscheme solarized

set background=dark
let g:solarized_termcolors=256

" goto last position when opening
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

""" highlight some interesing things

" parentesis
highlight MatchParen cterm=none ctermbg=none ctermfg=white
" trailing whitespace
highlight TrailingWhitespace ctermbg=DarkMagenta guibg=DarkMagenta
match TrailingWhitespace /\s\+$/
" protect from colour schema
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red

" highlight same concept (1)
autocmd CursorMoved * exe exists("HlUnderCursor")?HlUnderCursor?printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\')):'match none':""

" show tabs
set listchars=tab:>-
" or more
" set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set list

""" key bindings
map <F1> <Esc>
imap <F1> <Esc>

let mapleader = ","

" highlight same concept (2)
noremap <Leader>h :exe "let HlUnderCursor=exists(\"HlUnderCursor\")?HlUnderCursor*-1+1:1"<CR>

noremap <Leader>a :Ack
noremap <Leader>b :CtrlPBuffer <CR>
noremap <Leader>g :GundoToggle <CR>

noremap <leader>y :SyntasticToggleMode <CR>

" word processer
" justify text (needs `par`)
noremap <Leader>aj vip :!par -w80 -j <CR>
" center
noremap <Leader>ac vip :center 80 <CR>
" right align
noremap <Leader>ar vip :right 80 <CR>
" spellchecking
noremap <Leader>sp :setlocal spell spelllang=de <CR>
noremap <Leader>spe :setlocal spell spelllang=en <CR>
noremap <Leader>sn :set nospell  <CR>

" coding
noremap <Leader>n :NERDTreeTabsToggle <CR>
noremap <Leader>t :TagbarToggle <CR>
" noremap <Leader>c :TagbarToggle <CR> :NERDTreeTabsToggle <CR>

" remove trailing whitespace
noremap <Leader>tw :%s/ *$//g <CR>
" remove leading whitespace
noremap <Leader>tl :%s/^ *//g <CR>

" SVN
noremap <Leader>sb :VCSBlame <CR>
noremap <Leader>sl :VCSLog <CR>

" GIT
noremap <Leader>gb :Gblame <CR>
noremap <Leader>gl :Glog <CR>

" MRU
noremap <Leader>mru :MRU<CR>

" tabs
noremap <Leader>tn :tabnew<CR>
noremap <Leader>1 1gt<CR>
noremap <Leader>2 2gt<CR>
noremap <Leader>3 3gt<CR>
noremap <Leader>4 4gt<CR>
noremap <Leader>5 5gt<CR>
noremap <Leader>6 6gt<CR>
noremap <Leader>7 7gt<CR>
noremap <Leader>7 8gt<CR>
noremap <Leader>9 9gt<CR>

" buffers
noremap <Leader>bl :buffers<CR>
noremap <Leader>bn :bnext<CR>
noremap <Leader>bp :bprevious<CR>
noremap <Leader>b1 :buffer 1<CR>
noremap <Leader>b2 :buffer 2<CR>
noremap <Leader>b3 :buffer 3<CR>
noremap <Leader>b4 :buffer 4<CR>
noremap <Leader>b5 :buffer 5<CR>
noremap <Leader>b6 :buffer 6<CR>
noremap <Leader>b7 :buffer 7<CR>
noremap <Leader>b8 :buffer 8<CR>
noremap <Leader>b9 :buffer 9<CR>

" pretty print XML
noremap <Leader>x :%s/></>\r</g<CR> gg=G<CR>

""" not yet :( """" LDAP
""" not yet :( """noremap <Leader>o :/usr/bin/lbdbq %s <CR>

""" move between windows

nmap <silent> <C-J> :wincmd j <CR>
nmap <silent> <C-K> :wincmd k <CR>
nmap <silent> <C-H> :wincmd h <CR>
nmap <silent> <C-L> :wincmd l <CR>

""" numbers
noremap <silent> <Leader>nt :NumbersToggle<CR>

set cursorline
" set cursorcolumn

augroup XML
    autocmd!
    autocmd FileType xml setlocal foldmethod=indent foldlevelstart=999 foldminlines=0
augroup END


""""""""""""""""""""""""""""""""""""""""
"""  additinal plugin configuration  """

""" airline

let g:airline_powerline_fonts = 1
let g:airline_theme='solarized'


""" tagbar

let g:tagbar_left = 1

""" nerdtree

let g:NERDTreeWinPos = 'right'

""" NERDcommenter

let g:NERDSpaceDelims = 1
let g:NERDCommentEmptyLines = 1
" let g:NERDTrimTrailingWhitespace = 1
let g:NERDDefaultAlign = 'left'

""" syntastic

let g:syntastic_error_symbol = '✘'
let g:syntastic_warning_symbol = "▲"

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

let g:syntastic_haskell_checkers = ['hdevtools']    " works
let g:syntastic_enable_perl_checker = 1     " disabled for security reasons
let g:syntastic_perl_checkers = ['perl']    " works
let g:syntastic_python_python_exec = '/usr/bin/python3'

" let syntastic thing java checker already loaded, thus preventing compilation
" of java files (very slow!)
let g:loaded_syntastic_java_javac_checker = 1


""" neocomplete

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"

""" neosnippet

" imap <C-k> <Plug>(neosnippet_expand_or_jump)
" smap <C-k> <Plug>(neosnippet_expand_or_jump)
" xmap <C-k> <Plug>(neosnippet_expand_target)


""" tmux-complete

let g:tmuxcomplete#trigger = 'completefunc'

nmap <silent> <Leader>lb :call LbdbExpandCurLine()<RETURN>
vmap <silent> <Leader>lb :call LbdbExpandVisual()<RETURN>
imap <silent> <Leader>lb <ESC>:call LbdbExpandCurLine()<RETURN>A


""" delimitMate

let delimitMate_expand_cr = 1

""" numbers
let g:numbers_exclude = ['help', 'nerdtree', 'unite', 'tagbar', 'startify', 'gundo', 'vimshell', 'w3m', 'vundle']


""" CtrlP
let g:ctrlp_working_path_mode = 'ra'

""" CtrlP extension for ag
nnoremap <c-f> :CtrlPag<cr>
vnoremap <c-f> :CtrlPagVisual<cr>
nnoremap <leader>a/ :CtrlPagLocate
nnoremap <leader>ap :CtrlPagPrevious<cr>
